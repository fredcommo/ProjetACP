require(synapseClient)
ent  <- synGet("syn1898683")
source(ent@filePath)
ent  <- synGet('syn1898673')
kimData  <- readRDS(ent@filePath)
eset = kimData$eset
samples  <- kimData$samples
source('~/Documents/MyProjects/FredScripts/pcaFilters.R')
randProbes <- generateRandom(eset, 2000)
eset <- rbind(eset, randProbes)
#Perform a PCA on probes (probes by row, samples by columns)
pcaProbes <- prcomp(eset)
probeCols <- ifelse(grepl('random', rownames(eset)), rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))
pairs(pcaProbes$x[,1:3], cex = 0.2, col = probeCols)
randProbes <- generateRandom(eset, 2000)
colnames(randProbes) <- colnames(eset)
eset <- rbind(eset, randProbes)
#Perform a PCA on probes (probes by row, samples by columns)
pcaProbes <- prcomp(eset)
probeCols <- ifelse(grepl('random', rownames(eset)), rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))
pairs(pcaProbes$x[,1:3], cex = 0.2, col = probeCols)
probeCols <- ifelse(grepl('random', rownames(eset)), rgb(1, 0, 0, 0.5), rgb(0, 0.6, 1, 0.5))
pairs(pcaProbes$x[,1:3], cex = 0.2, col = probeCols)
#Generate the information curve
score <- pcaTrace1.1(eset, pcaProbes, lwd = 4)
#Get the number of informative probes regarding the information(%) you want.
Info <- pcaInfo(score)
#Select the corresponding probes at 5% of the information
select <- pcaSelect(score, 0.05)
```
###Compare the PCAs on the selected Vs. rejected probes
```
op <- par(no.readonly = TRUE)
Cols = ifelse(samples$TumourType == 'Adk', 'orangered', 'darkblue')
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
par(mfrow = c(1, 2))
plotPCA(pcaS, pch = 19, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = 19, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
par(op)
```
select <- pcaSelect(score, 0.05)
op <- par(no.readonly = TRUE)
Cols = ifelse(samples$TumourType == 'Adk', 'orangered', 'darkblue')
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
par(mfrow = c(1, 2))
plot(pcaS$x, pch = 19, col = Cols, main = paste(n,'informative probes'))
plot(pcaR$x, pch = 19, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
par(op)
op <- par(no.readonly = TRUE)
Cols = ifelse(samples$TumourType == 'Adk', 'orangered', 'darkblue')
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
par(mfrow = c(1, 2))
plot(pcaS$x, pch = 19, col = Cols, main = paste(n,'informative probes'))
plot(pcaR$x, pch = 19, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
par(op)
q()
q()
X <- lapply(1:50000, function(i){rnorm(500)})
X <- do.call(rbind, X)
grp <- reo(c('A', 'B'), each = 250)
grp <- rep(c('A', 'B'), each = 250)
test <- mt.maxT(X, grp )
require(multtest)
test <- mt.maxT(X, grp)
test <- mt.maxT(X, classlabel = grp)
X[1:5, 1:10]
head(grp)
table(grp)
grp <- rbinom(500, 1, 0.5)
table(grp)
test <- mt.maxT(X, classlabel = grp)
sum(test$rawp<0.05)/nrow(test)
sum(test$adjp<0.05)/nrow(test)
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaFilters.R')
pcaProbes <- prcomp(X)
score <- pcaTrace1.1(X, pcaProbes)
filttest <- mt.maxT(X[select,], classlabel = grp)
sum(filttest$rawp<0.05)/nrow(filttest)
sum(filttest$adjp<0.05)/nrow(filttest)
select <- pcaSelect(score, 0.05)
filttest <- mt.maxT(X[select,], classlabel = grp)
q()
require(cluster)
data(iris)
S <- silhouette(x[,-5])
S <- silhouette(iris[,-5])
iris
?silhouette
km <- kmeans(iris[,-5], k = 3)
km <- kmeans(iris[,-5], center = 3)
S <- silhouette(km)
S <- silhouette(km$cluster)
?pam
km <- pam(iris[,-5], 3)
km
S <- silhouette(km)
S
str(S)
head(S)
ss <- summary(S)
ss
plot(ss)
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
plot(ss)
S$cluster
cluster(S)
as.data.frame(S)
str(ss)
unlist(S)
unlist(S)$cluster
head(unlist(S))
S[,cluster]
S[,'cluster']
S[,'sil_width']
S$sil_width
ss <- S[,'sil_width']
mean(ss)
km <- pam(iris[,-5], 1)
S <- silhouette(km)
for(k in 2:6){
km <- pam(iris[,-5], k)
S <- silhouette(km)
ss <- S[,'sil_width']
cat(mean(ss))}
for(k in 2:6){
km <- pam(iris[,-5], k)
S <- silhouette(km)
ss <- S[,'sil_width']
cat(mean(ss), '\t')}
for(k in 2:10){
km <- pam(iris[,-5], k)
S <- silhouette(km)
ss <- S[,'sil_width']
cat(mean(ss), '\t')}
for(k in 2:10){
km <- pam(iris[,-5], k)
S <- silhouette(km, full = T)
ss <- S[,'sil_width']
cat(mean(ss), '\t')}
km <- pam(iris[,-5], 3)
km
head(iris)
km <- pam(iris[,1:4], 3)
km
iris[8,]
str(km)
km$isolation
km <- pam(iris[,1:4], 4)
km$isolation
km <- pam(iris[,1:4], 2)
km$isolation
pca <- prcomp(iris[,1:4])
km <- pam(pca$x[,1:2], 2)
km$isolation
km <- pam(pca$x[,1:2], 3)
km$isolation
numeric(20)
x <- c(rnorm(50), rnorm(50,mean=5), rnorm(30,mean=15))
asw <- numeric(20)
## Note that "k=1" won't work!
for (k in 2:20)
asw[k] <- pam(x, k) $ silinfo $ avg.width
k.best <- which.max(asw)
cat("silhouette-optimal number of clusters:", k.best, "\n")
asw
pam(x, 3)$isolation
plot(x)
x <- iris[,1:4]
asw <- numeric(20)
## Note that "k=1" won't work!
for (k in 2:20)
asw[k] <- pam(x, k) $ silinfo $ avg.width
k.best <- which.max(asw)
cat("silhouette-optimal number of clusters:", k.best, "\n")
aws
asw
plot(x)
#########################
# Download data from synapse
require(synapseClient)
require(affy)
require(multtest)
gse21344 <- synGet('syn1897345')
celPath <- paste0(gsub('\\?.+', '', gse21344@filePath), 'CEL')
untar(gse21344@filePath, exdir = celPath)
setwd(celPath)
rawData <- ReadAffy()
# Normalization
eset.mas5 <- mas5(rawData)
eset <- log2(exprs(eset.mas5))
boxplot(eset)
esetCall <- exprs(mas5calls(rawData))
freqCall <- lapply(1:nrow(esetCall), function(i){
A <- sum(esetCall[i,]=='A')
M <- sum(esetCall[i,]=='M')
P <- sum(esetCall[i,]=='P')
c(A = A/ncol(esetCall), M = M/ncol(esetCall), P = P/ncol(esetCall))
})
freqCall <- do.call(rbind, freqCall)
freqCall <- apply(freqCall, 1, function(x){names(which.max(x))})
rownames(freqCall) <- rownames(esetCall)
# Get the samples annotations
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaFilters.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/plotPCA.R')
op <- par(no.readonly = TRUE)
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_platinium_spike')
samples <- read.csv('PlatiniumSpike_samples.txt', header = TRUE, sep = '\t')
trueExp <- read.csv('PlatiniumSpike_probesValues.txt', header = TRUE, sep = '\t')
pcaProbes <- prcomp(eset)
probeCols <- ifelse(freqCall=='A', rgb(0.2, 0,0,0.25),
ifelse(freqCall=='M', rgb(0.5, 0,0,0.25), rgb(1, 0,0,0.25)))
pairs(pcaProbes$x[,1:3], cex = 0.2, col = probeCols)
probeCols <- ifelse(trueExp$expr=='high', rgb(1, 0, 0, 0.25),
ifelse(trueExp$expr=='low', rgb(0, 0, 1, 0.25), rgb(.8, .8, .8,0.25)))
pairs(pcaProbes$x[,1:3], cex = 0.2, col = probeCols)
pairs(pcaProbes$x[,1:3], cex = 0.3, col = probeCols)
table(freqCall)
table(trueExp$expr)
probeCols <- rep(rgb(.8, .8, .8,0.25), nrow(trueExp))
probeCols[trueExp$expr=='high'] <- rgb(1, 0, 0, 0.25)
probeCols[trueExp$expr=='low'] <- rgb(0, 0, 1, 0.25)
probeCols[trueExp$expr=='normal'] <- rgb(0, 0.5, 0.5, 0.25)
probeCols[grepl('MC|MF', trueExp$expr)] <- rgb(0.5, 0.5, 0, 0.25)
pairs(pcaProbes$x[,1:3], cex = 0.3, col = probeCols)
pairs(pcaProbes$x[,1:3], cex = 0.5, col = probeCols)
pairs(pcaProbes$x[,1:3], cex = 0.3, col = probeCols)
probeCols <- rep(rgb(.8, .8, .8,0.25), nrow(trueExp))
probeCols[trueExp$expr=='high'] <- rgb(1, 0, 0, 0.25)
probeCols[trueExp$expr=='low'] <- rgb(0, 0, 1, 0.25)
probeCols[trueExp$expr=='normal'] <- rgb(0, 0.5, 0.5, 0.25)
probeCols[grepl('MC|MF', trueExp$expr)] <- rgb(0, 0.5, 0, 0.25)
pairs(pcaProbes$x[,1:3], cex = 0.3, col = probeCols)
plot(pcaProbes$x[,1:2], cex = 0.3, col = probeCols)
plot(pcaProbes$x[,2:1], cex = 0.3, col = probeCols)
plot(pcaProbes$x[,2:1], cex = 0.5, col = probeCols)
plot(pcaProbes$x[,2:1], cex = 0.5, col = probeCols, pch = 19)
score <- pcaTrace1.1(eset, pcaProbes, lwd = 4)
info <- pcaInfo(score)
par(mfrow = c(2, 2))
for(p in c(0.05, 0.1, 0.25, 0.5)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
#  plotPCA(pcaS, col = c('orangered', 'darkblue')[samples$Condition], pch = 19,
#          main = paste('PCA on', n, 'selected probes'))
plotPCA(pcaR, col = c('orangered', 'darkblue')[samples$Condition], pch = 19,
xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste('PCA on', nrow(eset)-n, 'rejected probes'))
tab1 <- table(trueExp$expr[-select])/table(trueExp$expr)
tab2 <- table(factor(freqCall)[-select])/table(freqCall)
print(round(tab1, 4)*100)
print(round(tab2, 4)*100)
}
par(op)
fullTest <- mt.maxT(eset, classlabel=samples$Condition, B = 5000)
fullBest <- fullTest$index[fullTest$adjp<1e-3]
tab1 <- table(trueExp$expr[fullBest])/table(trueExp$expr)
round(tab1, 4)*100
select <- pcaSelect(score, 0.05)
filtTest <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
filtBest <- filtTest$index[filtTest$adjp<1e-3]
tab2 <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
round(tab2, 4)*100
select <- pcaSelect(score, 0.1)
filtTest <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
filtBest <- filtTest$index[filtTest$adjp<1e-3]
tab3 <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
round(tab3, 4)*100
select <- pcaSelect(score, 0.25)
filtTest <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
filtBest <- filtTest$index[filtTest$adjp<1e-3]
tab4 <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
round(tab4, 4)*100
select <- pcaSelect(score, 0.5)
filtTest <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
filtBest <- filtTest$index[filtTest$adjp<1e-3]
tab5 <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
round(tab5, 4)*100
select <- pcaSelect(score, 0.0)
length(select)
str(score)
source('~/Documents/MyProjects/FredScripts/pcaFilters.R')
select <- pcaSelect(score, 0.0)
length(select)
info
tab
filterPerf <- lapply(c(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-3]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
round(tab, 4)*100
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(c(0, 1, by = 0.05), function(p){
cat(p, '\n')
select <- pcaSelect(score, p)
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
c(p, round(tab, 4)*100)
at('\n')
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(c(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\t')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
c(p, round(tab, 4)*100)
cat('Best', lengt(Best),'\n')
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(c(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
c(p, round(tab, 4)*100)
cat('\nBest', length(Best),'\n')
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(seq(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
c(p, round(tab, 4)*100)
cat('\nBest', length(Best),'\n')
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf
p = 0.5
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
c(p, length(Best), round(tab, 4)*100)
cat('\nBest', length(Best),'\n\n')
c(p = p, signSize = length(Best), round(tab, 4)*100)
filterPerf <- lapply(seq(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
cat('\nBest', length(Best),'\n\n')
retunr(c(p = p, signSize = length(Best), round(tab, 4)*100))
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(seq(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][filtBest])/table(trueExp$expr)
cat('\nBest', length(Best),'\n\n')
return(c(p = p, signSize = length(Best), round(tab, 4)*100))
})
fPerf <- do.call(rbind, filterPerf)
fPerf
filterPerf <- lapply(seq(0, 1, by = 0.05), function(p){
select <- pcaSelect(score, p)
cat(p, '\tselect:', length(select),'\n')
Test <- mt.maxT(eset[select,], classlabel=samples$Condition, B = 5000)
Best <- Test$index[Test$adjp<1e-2]
tab <- table(trueExp$expr[select][Best])/table(trueExp$expr)
cat('\nBest', length(Best),'\n\n')
return(c(p = p, signSize = length(Best), round(tab, 4)*100))
})
fPerf <- do.call(rbind, filterPerf)
fPerf
fPerf <- as.data.frame(fPerf)
plot(fPerf$high)
plot(fPerf$signSize)
plot(log(fPerf$signSize))
barplot(fPerf$high)
barplot(fPerf$low, add = TRUE)
barplot(fPerf$low)
barplot(fPerf$high, add = TRUE)
barplot(fPerf$low, col = rgb(0,0.5,0.8,0.5))
barplot(fPerf$high, col = rgb(0.8,0.5,0,0.5), add = TRUE)
require(shiny)
scriptPath = "/Users/fredcommo/Documents/Projet Safir/CGHObjectsSources/shinyAppsCGH/"
runApp(paste0(scriptPath, 'shinyAppEx4/'))
