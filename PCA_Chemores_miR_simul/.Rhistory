par(op)
par(mfrow = c(3, 2))
for(s in c(-1, -0.5, 0)){
select <- as.numeric(which(log10(S) > s))
nWhite <- length(intersect(grep('random', rownames(eset)), select))
pca1 <- prcomp(t(eset[select, ]))
pca2 <- prcomp(t(eset[-select,]))
plotPCA(pca1, pch = 19, col = probeClass,
main = paste(length(select), 'selected probes, cutoff log10(Sdev) =', s,
'\n', nWhite, ' remaining whiteProbes'))
plotPCA(pca2, pch = 19, xlim = range(pca1$x[,1]), ylim = range(pca1$x[,2]),
col = probeClass,
main = paste(nrow(eset)-length(select), 'rejected probes, cutoff log10(Sdev) =', s))
}
par(op)
par(mfrow = c(3, 2))
for(s in c(-1, -0.5, 0)){
select <- as.numeric(which(log10(S) > s))
nWhite <- length(intersect(grep('random', rownames(eset)), select))
pca1 <- prcomp(t(eset[select, ]))
pca2 <- prcomp(t(eset[-select,]))
plotPCA(pca1, pch = 19, col = Cols,
main = paste(length(select), 'selected probes, cutoff log10(Sdev) =', s,
'\n', nWhite, ' remaining whiteProbes'))
plotPCA(pca2, pch = 19, xlim = range(pca1$x[,1]), ylim = range(pca1$x[,2]),
col = Cols,
main = paste(nrow(eset)-length(select), 'rejected probes, cutoff log10(Sdev) =', s))
}
par(op)
require(multtest)
fullTest <- mt.maxT(eset, classlabel = samples$TumourType, B = 5000)
bestFull <- fullTest$index[fullTest$adjp<0.01]]
length(bestFull)
bestFull <- fullTest$index[fullTest$adjp<0.01]
length(bestFull)
select <- pcaSelect(score, 0.05)
filtTest <- mt.maxT(eset[select,], classlabel = samples$TumourType, B = 5000)
bestFilt <- filtTest$index[filtTest$adjp<0.01]
length(bestFilt)
bestFull[1:10]
head(fullTest)
intersect(bestFull, grepl('random', rownames(fullTest))
intersect(bestFull, grepl('random', rownames(fullTest)))
length(intersect(bestFull, grepl('signif', rownames(fullTest))))
length(intersect(bestFull, grep('random', rownames(fullTest))))
length(intersect(bestFull, grep('signif', rownames(fullTest))))
fullTest[grep('signif', rownames(fullTest)),]
length(bestFull %in% grep('random', rownames(fullTest)))
grep('random', rownames(fullTest))
head(fullTest)
length(intersect(grep('random', rownames(fullTest)), bestFull))
length(intersect(grep('signif', rownames(fullTest)), bestFull))
length(intersect(grep('signif', rownames(fullTest)), bestFull))
grep('signif', rownames(fullTest))
length(intersect(grep('random', rownames(eset)), bestFull))
length(intersect(grep('signif', rownames(eset)), bestFull))
length(intersect(grep('random', rownames(eset)), bestFilt))
length(intersect(grep('signif', rownames(eset)), bestFilt))
grep('signif', rownames(eset))
head(bestFilt)
head(filtTest)
length(intersect(grep('random', rownames(eset)), bestFilt))
length(intersect(grep('signif', rownames(eset)), bestFilt))
length(intersect(grep('random', rownames(eset[select,])), bestFilt))
length(intersect(grep('signif', rownames(eset[select,])), bestFilt))
bestFull <- fullTest$index[fullTest$adjp<0.001]
length(bestFull)
length(intersect(grep('random', rownames(eset)), bestFull))
length(intersect(grep('signif', rownames(eset)), bestFull))
bestFilt <- filtTest$index[filtTest$adjp<0.001]
length(bestFilt)
length(intersect(grep('random', rownames(eset[select,])), bestFilt))
length(intersect(grep('signif', rownames(eset[select,])), bestFilt))
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaSelect.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaInfo.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaTrace.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaTrace1.1.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/plotPCA.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/simulationFunctions.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/graph3D.8.R')
op <- par(no.readonly = TRUE)
kimData = readRDS('/Users/fredcommo/Documents/MyProjects/Kim_Lung/kimData.rds')
eset = kimData$eset
samples <- kimData$samples
# Add nonspecific probes
Random <- .generateRandom1(eset, 2500)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
signif <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01,
grps = samples$TumourType, minP = 0.5, maxP = 0.8)
signif <- signif$Data
colnames(signif) <- colnames(eset)
eset <- rbind(eset, signif)
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve')
Info <- pcaInfo(score); Info
# Visualize filtered PCA at different cutoffs
Cols = ifelse(samples$TumourType == 'Adk', 'orangered', 'darkblue')
par(mfrow = c(3, 2))
redDot = 10^(1/score$lModel$x.intercept)
for(p in c(redDot, 0.1, 0.5)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
plotPCA(pcaS, pch = 19, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = 19, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
}
par(op)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
boxplot(log10(trueDist$S)~trueDist$M, names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
signifM <- apply(signif, 1, mean, na.rm = TRUE)
signifS <- apply(signif, 1, sd, na.rm = TRUE)
par(cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S))
points(randomM, log10(randomS), pch = 19, cex = 0.5, col = 'grey75')
points(signifM, log10(signifS), pch = 19, cex = 0.5, col = 'red3')
par(op)
idx <- sample(1:ncol(eset), ncol(eset)*.7)
train <- eset[,ixd]
grpTrain <- samples$TumourType[idx]
test <- eset[,-idx]
grpTest <- eset[-idx]
idx <- sample(1:ncol(eset), ncol(eset)*.7)
train <- eset[,idx]
grpTrain <- samples$TumourType[idx]
test <- eset[,-idx]
grpTest <- eset[-idx]
fullClass <- cv.glmnet(x = t(train), y = grpTrain, family = 'binomial', alpha = 0.01)
require(multtest)
require(glmnet)
fullClass <- cv.glmnet(x = t(train), y = grpTrain, family = 'binomial', alpha = 0.01)
str(fullClass)
fullFit <- predict(fullClass, x = t(test), s = bestL)
bestL <- fullClass$lambda.min
fullFit <- predict(fullClass, x = t(test), s = bestL)
fullFit <- predict(fullClass, newx = t(test), s = bestL)
fullFit
fullFit <- predict(fullClass, newx = t(test), s = bestL, type = 'class')
fullFit
table(fullFit, grpTest)
fullFit[,1]
table(fullFit[,1], grpTest)
grpTest
grpTest <- samples$TumourType[-idx]
table(fullFit[,1], grpTest)
select <- pcaSelect(score, 0.05)
table(fullFit, grpTest)
filtModel <- cv.glmnet(x = t(train[select,]), y = grpTrain, family = 'binomial', alpha = 0.01)
bestL <- filtModel$lambda.min
filtFit <- predict(filtModel, newx = t(test[select,]), s = bestL, type = 'class')
table(filtFit, grpTest)
fullModel <- cv.glmnet(x = t(train), y = grpTrain, family = 'binomial', alpha = 0.01)
bestL <- fullModel$lambda.min
bestB <- fullModel$glmnet.fit$beta[fullModel$glmnet.fit$lambda == bestL]
bestL
fullModel$glmnet.fit$lambda
bestB
sum(bestB != 0)
fullL <- fullModel$lambda.min
fullB <- fullModel$glmnet.fit$beta[fullModel$glmnet.fit$lambda == fullL]
head(fullModel$glmnet.fit$beta)
fullB <- fullModel$glmnet.fit$beta[,fullModel$glmnet.fit$lambda == fullL]
sum(bestB != 0)
fitB <- filtlModel$glmnet.fit$beta[,filtModel$glmnet.fit$lambda == filtL]
filtModel <- cv.glmnet(x = t(train[select,]), y = grpTrain, family = 'binomial', alpha = 0.01)
filtL <- filtModel$lambda.min
fitB <- filtlModel$glmnet.fit$beta[,filtModel$glmnet.fit$lambda == filtL]
sum(bestB != 0)
fitB <- filtModel$glmnet.fit$beta[,filtModel$glmnet.fit$lambda == filtL]
sum(bestB != 0)
sum(fullB != 0)
sum(filtB != 0)
filtB <- filtModel$glmnet.fit$beta[,filtModel$glmnet.fit$lambda == filtL]
sum(filtB != 0)
filtModel$cvm
str(filtModel)
fullB <- fullModel$glmnet.fit$beta[,fullModel$lambda == fullL]
sum(fullB != 0)
filtB <- filtModel$glmnet.fit$beta[,filtModel$lambda == filtL]
sum(filtB != 0)
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaSelect.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaInfo.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaTrace.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaTrace1.1.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/plotPCA.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/simulationFunctions.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/graph3D.8.R')
require(multtest)
require(glmnet)
op <- par(no.readonly = TRUE)
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_Chemores_miR_simul/')
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.25)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)', main = 'Sdev Vs. mean distribution')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
tnProbesM <- apply(tnProbes, 1, mean, na.rm = TRUE)
tnProbesS <- apply(tnProbes, 1, sd, na.rm = TRUE)
disProbesM <- apply(disProbes, 1, mean, na.rm = TRUE)
disProbesS <- apply(disProbes, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('topleft', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = 19, col = c('steelblue', 'black', 'red3', 'blue3'), cex = 1.5, bty = 'n')
par(op)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('bottomright', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = 19, col = c('steelblue', 'black', 'red3', 'blue3'), cex = 1.25, bty = 'n')
par(op)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('bottomright', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = 19, col = c('steelblue', 'grey', 'red3', 'blue3'), cex = 1.25, bty = 'n')
par(op)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('bottomright', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = c(19,), col = c('steelblue', 'black', 'red3', 'blue3'), cex = 1.25, bty = 'n')
par(op)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('bottomright', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = c(19,1,19,19), col = c('steelblue', 'black', 'red3', 'blue3'), cex = 1.25, bty = 'n')
par(op)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
legend('bottomright', legend = c('Normal', 'Adk', 'Sq'), pch = c(1, 19, 19),
col = c('black', 'orangered', 'darkblue'), cex = 1.25, bty = 'n')
par(op)
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
legend('bottomright', legend = c('Normal', 'Adk', 'Sq'), pch = c(1, 19, 19),
col = c('black', 'orangered', 'darkblue'), cex = 1.25, bty = 'n')
par(op)
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_Chemores_miR_simul/')
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.25)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)', main = 'Sdev Vs. mean distribution')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
tnProbesM <- apply(tnProbes, 1, mean, na.rm = TRUE)
tnProbesS <- apply(tnProbes, 1, sd, na.rm = TRUE)
disProbesM <- apply(disProbes, 1, mean, na.rm = TRUE)
disProbesS <- apply(disProbes, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1),
colramp = colorRampPalette(c("white", "steelblue")), main = 'Added probes')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
legend('bottomright', legend = c('original', 'random added', 'tissue added', 'tumType added'),
pch = c(19,1,19,19), col = c('steelblue', 'black', 'red3', 'blue3'), cex = 1.25, bty = 'n')
par(op)
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
legend('bottomright', legend = c('Normal', 'Adk', 'Sq'), pch = c(1, 19, 19),
col = c('black', 'orangered', 'darkblue'), cex = 1.25, bty = 'n')
par(op)
# PCA Filtering
pcaProbes <- prcomp(eset)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
par(op)
Info <- pcaInfo(score); Info
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'green'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'black'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(19, 1, 19, 19)[factor(probeClass)], cex = 1)
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(1, 19, 19, 19)[factor(probeClass)], cex = 1)
# Visualize filtered PCA at different cutoffs
Cols = ifelse(samples$Disease == 'AC', 'orangered', 'darkblue')
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
par(mfrow = c(3, 2))
redDot = 10^(1/score$lModel$x.intercept)
for(p in c(0.05, 0.1, 0.25)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
plotPCA(pcaS, pch = Pch, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = Pch, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
}
par(op)
op <- par(no.readonly = TRUE)
kimData = readRDS('/Users/fredcommo/Documents/MyProjects/Kim_Lung/kimData.rds')
eset = kimData$eset
samples <- kimData$samples
# Add nonspecific probes
Random <- .generateRandom1(eset, floor(nrow(eset)*.1))
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
signif <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01,
grps = samples$TumourType, minP = 0.5, maxP = 0.8)
signif <- signif$Data
colnames(signif) <- colnames(eset)
eset <- rbind(eset, signif)
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve')
Info <- pcaInfo(score); Info
# Visualize filtered PCA at different cutoffs
Cols = ifelse(samples$TumourType == 'Adk', 'orangered', 'darkblue')
par(mfrow = c(3, 2))
redDot = 10^(1/score$lModel$x.intercept)
for(p in c(redDot, 0.1, 0.5)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
plotPCA(pcaS, pch = 19, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = 19, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
}
par(op)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
boxplot(log10(trueDist$S)~trueDist$M, names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
signifM <- apply(signif, 1, mean, na.rm = TRUE)
signifS <- apply(signif, 1, sd, na.rm = TRUE)
par(cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S))
points(randomM, log10(randomS), pch = 19, cex = 0.5, col = 'grey75')
points(signifM, log10(signifS), pch = 19, cex = 0.5, col = 'red3')
par(op)
# Compute PCAs according to S cutoff: check out to filter on variances
# Count the remaining white probes
par(mfrow = c(3, 2))
for(s in c(-1, -0.5, 0)){
select <- as.numeric(which(log10(S) > s))
nWhite <- length(intersect(grep('random', rownames(eset)), select))
pca1 <- prcomp(t(eset[select, ]))
pca2 <- prcomp(t(eset[-select,]))
plotPCA(pca1, pch = 19, col = Cols,
main = paste(length(select), 'selected probes, cutoff log10(Sdev) =', s,
'\n', nWhite, ' remaining whiteProbes'))
plotPCA(pca2, pch = 19, xlim = range(pca1$x[,1]), ylim = range(pca1$x[,2]),
col = Cols,
main = paste(nrow(eset)-length(select), 'rejected probes, cutoff log10(Sdev) =', s))
}
par(op)
# Compare Tumour Vs Normal on the original data set
eset <- Chem$eset
samples <- Chem$samples
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
# Plot each signif probes on a pairs(pcaProbes)
pcaProbes <- prcomp(eset)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(19,1,19)[factor(probeClass)], cex = 1)
require(synapseClient)
cgh  <- loadEntity('syn1864342')
load(file.path(cgh$cacheDir, cgh$files))
ls()
cghProfile
require(synapseClient)
# Load class def & accessors
e1  <- loadEntity('syn1864348')
source(file.path(e1$cacheDir, e1$files))
e2  <- loadEntity('syn1864353')
source(file.path(e2$cacheDir, e2$files))
e3  <- loadEntity('syn1864359')
source(file.path(e3$cacheDir, e3$files))
# Load data
cgh  <- loadEntity('syn1864342')
load(file.path(cgh$cacheDir, cgh$files))
ls()
q()
