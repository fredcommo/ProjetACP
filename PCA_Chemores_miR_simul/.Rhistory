idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.1)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
signif <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01,
grps = samples$Disease, minP = 0.5, maxP = 0.8)
signif <- signif$Data
colnames(signif) <- colnames(eset)
eset <- rbind(eset, signif)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
signifM <- apply(signif, 1, mean, na.rm = TRUE)
signifS <- apply(signif, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1))
points(randomM, log10(randomS), pch = 19, cex = 0.5, col = 'grey75')
points(signifM, log10(signifS), pch = 19, cex = 0.5, col = 'red3')
par(op)
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
Info <- pcaInfo(score); Info
probeClass <- ifelse(grepl('random',rownames(eset)), 'grey75',
ifelse(grepl('signif',rownames(eset)), 'red3', 'steelblue1'))
pairs(pcaProbes$x[,1:3], col = probeClass, cex = 0.2)
# Visualize filtered PCA at different cutoffs
Cols = ifelse(samples$Disease == 'AC', 'orangered', 'darkblue')
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
par(mfrow = c(3, 2))
redDot = 10^(1/score$lModel$x.intercept)
for(p in c(0.05, 0.1, 0.25)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
plotPCA(pcaS, pch = Pch, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = Pch, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
}
par(op)
# Compare Tumour Vs Normal
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
probeClass <- ifelse(grepl('random',rownames(eset)), 'grey75',
ifelse(grepl('signif',rownames(eset)), 'red3', 'steelblue1'))
pairs(pcaProbes$x[,1:3], col = probeClass, cex = 1)
probeClass <- ifelse(grepl('random',rownames(eset)), 'grey75',
ifelse(grepl('signif',rownames(eset)), 'red3', 'steelblue1'))
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
probeClass <- ifelse(grepl('random',rownames(eset)), 'grey30',
ifelse(grepl('signif',rownames(eset)), 'red3', 'steelblue1'))
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
grps <- ifelse(grepl('AC|SCC', samples$Disease), samples$Disease, NA)
grps
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
grps
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_Chemores_miR_simul/')
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.1)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
signif <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01,
grps = grps, minP = 0.5, maxP = 0.8)
signif <- signif$Data
colnames(signif) <- colnames(eset)
eset <- rbind(eset, signif)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
signifM <- apply(signif, 1, mean, na.rm = TRUE)
signifS <- apply(signif, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1))
points(randomM, log10(randomS), pch = 19, cex = 0.5, col = 'grey75')
points(signifM, log10(signifS), pch = 19, cex = 0.5, col = 'red3')
par(op)
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
Info <- pcaInfo(score); Info
probeClass <- ifelse(grepl('random',rownames(eset)), 'grey30',
ifelse(grepl('signif',rownames(eset)), 'red3', 'steelblue1'))
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.1)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
?smoothScatter
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "grey30")))
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.1)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.01, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
tnProbesM <- apply(tnProbes, 1, mean, na.rm = TRUE)
tnProbesS <- apply(tnProbes, 1, sd, na.rm = TRUE)
disProbesM <- apply(disProbes, 1, mean, na.rm = TRUE)
disProbesS <- apply(disProbes, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "grey30")))
points(randomM, log10(randomS), pch = 19, cex = 0.5, col = 'grey75')
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 0.5, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 0.5, col = 'blue3')
par(op)
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "violet")))
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "purple")))
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "steelblue")))
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey30')
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey50')
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
points(randomM, log10(randomS))
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
Info <- pcaInfo(score); Info
probeClass <- rep('steelblue2', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'grey30'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'grey75'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_Chemores_miR_simul/')
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.1)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
tnProbesM <- apply(tnProbes, 1, mean, na.rm = TRUE)
tnProbesS <- apply(tnProbes, 1, sd, na.rm = TRUE)
disProbesM <- apply(disProbes, 1, mean, na.rm = TRUE)
disProbesS <- apply(disProbes, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "steelblue")))
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
par(op)
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
Info <- pcaInfo(score); Info
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'grey75'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_Chemores_miR_simul/')
Chem <- readRDS('chemores_miR.rds')
eset <- Chem$eset
samples <- Chem$samples
# Filter on tumor cell prop
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
# Add nonspecific probes
Random <- .generateRandom1(eset, nrow(eset)*.25)
colnames(Random) <- colnames(eset)
eset <- rbind(eset, Random)
# Add specific probes
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
grps <- samples$Status
addTN <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
tnProbes <- addTN$Data
colnames(tnProbes) <- colnames(eset)
rownames(tnProbes) <- paste0('status', seq(1, nrow(tnProbes)))
grps <- ifelse(grepl('AC|SCC', samples$Disease), as.character(samples$Disease), NA)
addDis <- .generateGrps(M, S, ncol(eset), nrow(eset)*.1, grps = grps, minP = 0.5, maxP = 0.8)
disProbes <- addDis$Data
colnames(disProbes) <- colnames(eset)
rownames(disProbes) <- paste0('disease', seq(1, nrow(disProbes)))
eset <- rbind(eset, tnProbes, disProbes)
# Visualize the construction
# S vs. M distribution
trueDist <- .computeBounds(M, S)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
boxplot(log10(trueDist$S) ~ factor(trueDist$M), names = round(unique(trueDist$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
par(op)
# Visualize the added probes
randomM <- apply(Random, 1, mean, na.rm = TRUE)
randomS <- apply(Random, 1, sd, na.rm = TRUE)
tnProbesM <- apply(tnProbes, 1, mean, na.rm = TRUE)
tnProbesS <- apply(tnProbes, 1, sd, na.rm = TRUE)
disProbesM <- apply(disProbes, 1, mean, na.rm = TRUE)
disProbesS <- apply(disProbes, 1, sd, na.rm = TRUE)
par(mar = c(5, 6, 4, 2), cex.main = 2.5, cex.lab = 1.75, cex.axis = 1.25)
smoothScatter(M, log10(S), ylim = range(-1.5, 1), colramp = colorRampPalette(c("white", "steelblue")))
points(randomM, log10(randomS), pch = 19, cex = 1, col = 'grey75')
points(randomM, log10(randomS))
points(tnProbesM, log10(tnProbesS), pch = 19, cex = 1, col = 'red3')
points(disProbesM, log10(disProbesS), pch = 19, cex = 1, col = 'blue3')
par(op)
# Plot original PCA
Cols = ifelse(samples$Disease == 'AC', 'orangered',
ifelse(samples$Disease == 'SCC', 'darkblue', 'grey'))
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
pcaSamples <- prcomp(t(eset))
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# PCA Filtering
pcaProbes <- prcomp(eset)
score <- pcaTrace1.1(eset, pcaProbes, main = 'Information curve', lwd = 5)
Info <- pcaInfo(score); Info
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'grey75'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
probeClass <- rep('lightblue', nrow(eset))
probeClass[grep('random',rownames(eset))] <- 'green'
probeClass[grep('status',rownames(eset))] <- 'red3'
probeClass[grep('disease',rownames(eset))] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
plotPCA(pcaSamples, pch = Pch, col = Cols, main = 'PCA on original data set')
# Visualize filtered PCA at different cutoffs
Cols = ifelse(samples$Disease == 'AC', 'orangered', 'darkblue')
Pch <- ifelse(samples$Status == 'Tumor', 19, 1)
par(mfrow = c(3, 2))
redDot = 10^(1/score$lModel$x.intercept)
for(p in c(0.05, 0.1, 0.25)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(eset[select,]))
pcaR <- prcomp(t(eset[-select,]))
plotPCA(pcaS, pch = Pch, col = Cols, main = paste(n,'informative probes'))
plotPCA(pcaR, pch = Pch, col = Cols, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste(nrow(eset)-n,'rejected probes'))
}
par(op)
# Compare Tumour Vs Normal
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
# Plot each signif probes on a pairs(pcaProbes)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
# Compare Tumour Vs Normal on the original data set
eset <- Chem$eset
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
TN
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
# Compare Tumour Vs Normal on the original data set
eset <- Chem$eset
samples <- Chem$samples
idx <- which(samples$TumCellPercent>=50)
samples <- samples[idx,]
eset <- eset[,idx]
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
# Plot each signif probes on a pairs(pcaProbes)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
pcaProbes <- prcomp(eset)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
bestTN <- testTN$index[testTN$adjp<0.05]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
bestDis <- testDis$index[testDis$adjp<0.05]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.1]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.1]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
# Plot each signif probes on a pairs(pcaProbes)
pcaProbes <- prcomp(eset)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
TN <- factor(as.character(samples$Status))
testTN <- mt.maxT(eset, classlabel = TN, B = 10000)
bestTN <- testTN$index[testTN$adjp<0.001]
length(bestTN); nrow(eset); length(bestTN)/nrow(eset)
length(intersect(grep('random', rownames(eset)), bestTN))
length(intersect(grep('signif', rownames(eset)), bestTN))
# Compare in Tumors only, Sq Vs AC
idx <- which(samples$Status == 'Tumor' & samples$Disease %in% c('AC', 'SCC'))
disease <- factor(as.character(samples$Disease[idx]))
tumors <- eset[,idx]
testDis <- mt.maxT(tumors, classlabel = disease, B = 10000)
bestDis <- testDis$index[testDis$adjp<0.001]
length(bestDis); nrow(tumors); length(bestDis)/nrow(tumors)
length(intersect(grep('random', rownames(tumors)), bestDis))
length(intersect(grep('signif', rownames(tumors)), bestDis))
# Plot each signif probes on a pairs(pcaProbes)
pcaProbes <- prcomp(eset)
probeClass <- rep('lightblue', nrow(eset))
probeClass[bestTN] <- 'red3'
probeClass[bestDis] <- 'blue3'
pairs(pcaProbes$x[,1:3], col = probeClass, pch = 19, cex = 1)
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(1,19,19)[factor(probeClass)], cex = 1)
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(19,19,1)[factor(probeClass)], cex = 1)
pairs(pcaProbes$x[,1:3], col = probeClass, pch = c(19,1,19)[factor(probeClass)], cex = 1)
