idx
idx <- grep('LUNG', GEids)
Data <- apply(Data[,idx], 1, scale)
mekResp <- mekResp[idx]
pcaSamples <- prcomp(t(Data))
plotPCA(pcaSamples)
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaSelect.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaInfo.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaTrace1.1.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/plotPCA.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/heatmap.3.R')
source('/Users/fredcommo/Documents/MyProjects/FredScripts/GeneRequest.v7.R')
plotPCA(pcaSamples)
dim(Data)
pcaSamples <- prcomp(t(Data))
plotPCA(pcaSamples)
Data <- as.data.frame(t(Data))
pcaSamples <- prcomp(t(Data))
plotPCA(pcaSamples)
pcaProbes1 <- prcomp(Data)
plotPCA(pcaProbes1)
score <- pcaTrace(Data, pcaProbes1)
score <- pcaTrace1.1(Data, pcaProbes1)
info <- pcaInfo(score)
info
par(mfrow = c(3, 2))
for(p in c(0.05, 0.1, 0.25)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(Data[select,]))
plotPCA(pcaS, col = sampCol, pch = 19,
main = paste('PCA with', n, 'selected probes'))
pcaR <- prcomp(t(Data[-select,]))
plotPCA(pcaR, col = sampCol, pch = 19, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste('PCA with', nrow(Data) - n, 'rejected probes'))
}
par(op)
par(mfrow = c(3, 2))
for(p in c(0.05, 0.1, 0.25)){
select <- pcaSelect(score, p)
n <- length(select)
pcaS <- prcomp(t(Data[select,]))
plotPCA(pcaS, pch = 19,
main = paste('PCA with', n, 'selected probes'))
pcaR <- prcomp(t(Data[-select,]))
plotPCA(pcaR, pch = 19, xlim = range(pcaS$x[,1]), ylim = range(pcaS$x[,2]),
main = paste('PCA with', nrow(Data) - n, 'rejected probes'))
}
par(op)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp)
B = 100
Nfold = 10
Nlambda = 100
GE = Data
resp = mekResp
trainIndex <- sample(1:length(resp), length(resp)*0.70)
trainIndex
length(trainIndex)
length(resp)
trainSet <- GE[ ,trainIndex]
yTrain <- resp[trainIndex]
testSet <- GE[ ,-trainIndex]
yTest <- resp[-trainIndex]
bIndex <- sample(1:ncol(trainSet), replace = TRUE)
cvnetModel <- cv.glmnet(x = t(trainSet[,bIndex]),
y = yTrain[bIndex],
nfolds = Nfold, nlambda = Nlambda,
family = 'gaussian')
t(trainSet[,bIndex])
GE
head(GE)
head(trainSet)
head(trainSet[,bIndex])
any(is.na(trainSet[,bIndex]))
cvnetModel <- cv.glmnet(x = t(trainSet),
y = yTrain,
nfolds = Nfold, nlambda = Nlambda,
family = 'gaussian')
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
cvnetModel <- cv.glmnet(x = t(trainSet),
y = yTrain,
nfolds = 5, nlambda = Nlambda,
family = 'gaussian')
yTrain
GE <- Data
resp <- mekResp
if(any(is.na(resp))){
NAs <- which(is.na(resp))
GE <- GE[, -NAs]
resp = resp[-NAs]
}
trainIndex <- sample(1:length(resp), length(resp)*0.70)
trainSet <- GE[ ,trainIndex]
yTrain <- resp[trainIndex]
testSet <- GE[ ,-trainIndex]
yTest <- resp[-trainIndex]
yTrain
yTest
cvnetModel <- cv.glmnet(x = t(trainSet),
y = yTrain,
nfolds = 5, nlambda = Nlambda,
family = 'gaussian')
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel
alpha = 0.1
GE <- Data
resp <- mekResp
if(any(is.na(resp))){
NAs <- which(is.na(resp))
GE <- GE[, -NAs]
resp = resp[-NAs]
}
trainIndex <- sample(1:length(resp), length(resp)*0.70)
trainSet <- GE[ ,trainIndex]
yTrain <- resp[trainIndex]
testSet <- GE[ ,-trainIndex]
yTest <- resp[-trainIndex]
train <- lapply(seq(1, B), function(b){
bIndex <- sample(1:ncol(trainSet), replace = TRUE)
cvnetModel <- cv.glmnet(x = t(trainSet[,bIndex]),
y = yTrain[bIndex],
alpha = alpha, nfolds = Nfold, nlambda = Nlambda,
family = 'gaussian')
bestL <- cvnetModel$lambda.min
bestB <- cvnetModel$glmnet.fit$beta[, which(cvnetModel$lambda == bestL)]
# Keep the beta values and rank them.
cat(b, '\tlambda:', bestL, '\tnonZero beta:', sum(bestB != 0), '\tcvm:', min(cvnetModel$cvm),'\n')
bestB
})
GE <- Data
resp <- mekResp
B = 20
if(any(is.na(resp))){
NAs <- which(is.na(resp))
GE <- GE[, -NAs]
resp = resp[-NAs]
}
trainIndex <- sample(1:length(resp), length(resp)*0.70)
trainSet <- GE[ ,trainIndex]
yTrain <- resp[trainIndex]
testSet <- GE[ ,-trainIndex]
yTest <- resp[-trainIndex]
train <- lapply(seq(1, B), function(b){
bIndex <- sample(1:ncol(trainSet), replace = TRUE)
cvnetModel <- cv.glmnet(x = t(trainSet[,bIndex]),
y = yTrain[bIndex],
alpha = alpha, nfolds = Nfold, nlambda = Nlambda,
family = 'gaussian')
bestL <- cvnetModel$lambda.min
bestB <- cvnetModel$glmnet.fit$beta[, which(cvnetModel$lambda == bestL)]
# Keep the beta values and rank them.
cat(b, '\tlambda:', bestL, '\tnonZero beta:', sum(bestB != 0), '\tcvm:', min(cvnetModel$cvm),'\n')
bestB
})
trainScores <- .netScores(do.call(cbind, train))
score <- trainScores$Score
score
geneIndex <- which(score > 0)
geneIndex
cvnetModel <- cv.glmnet(x = t(trainSet[geneIndex,]), y = yTrain, alpha = alpha, nfolds = Nfold, nlambda = Nlambda, family = 'gaussian')
bestL <- cvnetModel$lambda.min
bestB <- cvnetModel$glmnet.fit$beta[, which(cvnetModel$lambda == bestL)]
fit <- predict(cvnetModel, newx = t(testSet[geneIndex,]), s = bestL)
fit
yTest
r <- summary(lmTest)$adj.r.squared
lmTest <- lm(fit ~ yTest)
r <- summary(lmTest)$adj.r.squared
r
cor(fit, yTest)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp, B = 50)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp, B = 50)
fullModel$y
fullModel$yFit
plot(fullModel$y, fullModel$yFit)
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
yFit <- predict(fullModel$model, newdata = mekResp)
yFit <- predict(fullModel$model, newdata = list(newx = mekResp))
yFit <- predict(fullModel$model, newx = t(Data))
fullModel$bestB
source('~/Documents/MyProjects/FredScripts/glmNetModels.R')
fullModel <- .netModel1(Data, mekResp, B = 50)
fullModel$boostGenes
topList <- fullModel$boostGenes
topList <- as.numeric(fullModel$boostGenes)
yFit <- predict(fullModel$model, newx = t(Data[topList,]))
plot(mekRpes, topList)
plot(mekResp, topList)
plot(mekResp, yFit)
yFit
fullModel <- .netModel1(Data, mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(fullModel$bestB)
yFit <- predict(fullModel$model, newx = t(Data[topList,]))
plot(mekResp, yFit)
fullModel
topList
topList <- as.numeric(fullModel$boostGenes)
yFit <- predict(fullModel$model, newx = t(Data[topList,]))
yFit
plot(fullModel$y, fullModel$yFit)
yFit <- predict(fullModel$model, newx = t(Data[topList,]), s = fullModel$bestL)
yFit
plot(mekResp, yFit)
legend('topleft', legend = paste('pearson cor:', round(fullModel$pearsCor, 3)))
?cor
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
pCor
plot(mekResp, yFit)
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
select <- pcaSelect(score, 0.1)
filteredModel <- .netModel1(Data[,select], mekResp, B = 100, alpha = 0.01)
select
select <- pcaSelect(score, 0.1)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
select <- pcaSelect(score, 0.1)
p
select <- pcaSelect(score, p)
source('/Users/fredcommo/Documents/MyProjects/FredScripts/pcaSelect.R')
select <- pcaSelect(score, 0.1)
pcaSelect
score <- pcaTrace1.1(Data, pcaProbes1)
select <- pcaSelect(score, 0.1)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[topList,]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
pCor
plot(mekResp, yFit)
yFit
yFit <- predict(fullModel$model, newx = t(Data[topList,]), s = fullModel$bestL)
topList <- as.numeric(fullModel$boostGenes)
yFit <- predict(fullModel$model, newx = t(Data[topList,]), s = fullModel$bestL)
yFit
select <- pcaSelect(score, 0.5)
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[topList,]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit)
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
topList
yFit <- predict(filteredModel$model, newx = t(Data[[select]topList,]), s = filteredModel$bestL)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
yFit
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit)
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
abline(lm(yFit ~ y), lwd = 3, col = 'red3')
abline(lm(yFit ~ mekResp), lwd = 3, col = 'red3')
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue', xlim = range(0, 3))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('glmnet on ', length(select), ' selected genes (p: ', p, '%)'))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('MEK inhib: glmnet on ', n, ' selected genes (p: ', p, '%)\n',
nrow(Data) - n, ' rejected'))
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
n <- length(select)
getwd()
setwd('/Users/fredcommo/Documents/MyProjects/ProjetACP/PCA_on_CCLE/')
pcaProbes <- prcomp(Data)
plotPCA(pcaProbes)
png(file = paste0('CCLE_', target, 'inhib', '_GE_Trace.png'),
width = 800, height = 600)
par(mar = c(5, 5, 5, 2), cex.main = 1.75, cex.lab = 1.5, cex.axis = 1.25)
score <- pcaTrace1.1(Data, pcaProbes, lwd = 5,
main = paste('CCLE_', target, 'inhib', '\ninformation curve'))
par(op)
dev.off()
info <- pcaInfo(score)
fullModel <- .netModel1(Data, mekResp, B = 100, alpha = 0.01)
topListFull <- as.numeric(fullModel$boostGenes)
yFitFull <- predict(fullModel$model, newx = t(Data[topListFull,]), s = fullModel$bestL)
pCor <- as.numeric(cor(mekResp, yFitFull, use = 'pairwise.complete.obs'))
png(file = paste0(paste0('CCLE_', target, 'inhib', '_GE_glmnet.png')),
width = 1000, height = 1200)
par(mfrow = c(3, 2), mar = c(5, 5, 6, 2), cex.main = 1.8, cex.lab = 1.6, cex.axis = 1.3)
plot(mekResp, yFitFull, main = 'model on full GE matrix')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
for(p in c(0.05, 0.1, 0.25, 0.5, 0.75)){
select <- pcaSelect(score, p)
n <- length(select)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('MEK inhib: glmnet on ', n, ' selected genes (p: ', p, '%)\n',
nrow(Data) - n, ' rejected'))
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
}
par(op)
dev.off()
png(file = paste0(paste0('CCLE_', target, 'inhib', '_GE_glmnet.png')),
width = 1000, height = 1200)
par(mfrow = c(3, 2), mar = c(5, 5, 6, 2), cex.main = 1.8, cex.lab = 1.6, cex.axis = 1.3)
plot(mekResp, yFitFull, main = 'model on full GE matrix')
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
for(p in c(0.05, 0.1, 0.25, 0.5, 0.75)){
select <- pcaSelect(score, p)
n <- length(select)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('MEK inhib: glmnet on ', n, ' selected genes (p: ', p, '%)\n',
nrow(Data) - n, ' rejected'))
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)))
}
par(op)
dev.off()
png(file = paste0(paste0('CCLE_', target, 'inhib', '_GE_glmnet.png')),
width = 1000, height = 1200)
par(mfrow = c(3, 2), mar = c(5, 5, 6, 2), cex.main = 1.8, cex.lab = 1.6, cex.axis = 1.3)
plot(mekResp, yFitFull, main = 'model on full GE matrix')
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)), cex = 1.5)
for(p in c(0.05, 0.1, 0.25, 0.5, 0.75)){
select <- pcaSelect(score, p)
n <- length(select)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('MEK inhib: glmnet on ', n, ' selected genes (p: ', p, '%)\n',
nrow(Data) - n, ' rejected'))
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)), cex = 1.5)
}
par(op)
dev.off()
png(file = paste0(paste0('CCLE_', target, 'inhib', '_GE_glmnet.png')),
width = 1000, height = 1200)
par(mfrow = c(3, 2), mar = c(5, 5, 6, 2), cex.main = 1.8, cex.lab = 1.6, cex.axis = 1.3)
plot(mekResp, yFitFull, main = 'model on full GE matrix')
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)), cex = 1.5)
for(p in c(0.05, 0.1, 0.25, 0.5, 0.75)){
select <- pcaSelect(score, p)
n <- length(select)
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
plot(mekResp, yFit, pch = 19, col = 'grey30', cex = 1.25,
main = paste0('MEK inhib: glmnet on ', n, ' selected genes (p: ', p, '%)\n',
nrow(Data) - n, ' rejected'))
abline(lm(yFit ~ mekResp), lwd = 3, col = 'blue')
legend('topleft', legend = paste('pearson cor:', round(pCor, 3)), cex = 1.5)
}
par(op)
dev.off()
perf <- lapply(seq(0.05, 1, by = 0.05),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
filteredModel <- .netModel1(Data[select,], mekResp, B = 100, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
cbind(p, n, pCor)
}
)
perf <- do.call(rbind, perf)
perf
perf <- as.data.frame(perf)
plot(perf$p, perf$pCor)
pCorFull <- as.numeric(cor(mekResp, yFitFull, use = 'pairwise.complete.obs'))
abline(h = pCorFull)
# Compute the perf according to cutoff
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
cbind(p, n, pCor)
}
)
# Compute the perf according to cutoff
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 5, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
cbind(p, n, pCor)
}
)
perf <- as.data.frame(do.call(rbind, perf))
plot(perf$p, perf$pCor)
abline(h = pCorFull)
# Compute the perf according to cutoff
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 5, alpha = 0.1)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
cbind(p, n, pCor)
}
)
perf <- as.data.frame(do.call(rbind, perf))
plot(perf$p, perf$pCor)
abline(h = pCorFull)
# Compute the perf according to cutoff
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 5, alpha = 0.05)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
cbind(p, n, pCor)
}
)
perf <- as.data.frame(do.call(rbind, perf))
plot(perf$p, perf$pCor)
abline(h = pCorFull)
# Compute the perf according to cutoff
K = 10
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
tmp <- lapply(1:K, function(k){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 10, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
pCor
)
tmp <- do.call(c, pCor)
}
cbind(rep(p, K), rep(n, K), pCor)
}
)
K = 10
tmp <- lapply(1:K, function(k){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 10, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
pCor
)
tmp <- lapply(1:K, function(k){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 10, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
pCor <- as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
pCor
)
pCor
tmp <- lapply(1:K, function(k){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 10, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
)
# Compute the perf according to cutoff
K = 10
perf <- lapply(seq(0.1, 1, by = 0.1),function(p){
select <- pcaSelect(score, p)
n <- length(select)
pCor <- NA
if(n>2){
tmp <- lapply(1:K, function(k){
filteredModel <- .netModel1(Data[select,], mekResp, B = 50, Nfold = 10, alpha = 0.01)
topList <- as.numeric(filteredModel$boostGenes)
yFit <- predict(filteredModel$model, newx = t(Data[select[topList],]), s = filteredModel$bestL)
as.numeric(cor(mekResp, yFit, use = 'pairwise.complete.obs'))
}
)
tmp <- do.call(c, tmp)
}
cbind(rep(p, K), rep(n, K), pCor)
}
)
